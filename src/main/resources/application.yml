const:
  default-page-size: 20

file:
  directory: D:/2024-02/download/greengram_ver3

jwt:
  issuer: green@green.kr
  secret-key: DaeguGreenArtAcademyClass502RoomForJavaSpringBootFightingD23sdfsdf23FDSADFSDFDass502RoomForJavaSprinass502RoomForJavaSprin

mybatis:
  configuration:
    map-underscore-to-camel-case: true #snake_case column명을 자동으로 camel_case형으로 변환
  mapper-locations: mappers/**/*.xml

spring:
  application:
    name: GreenGramVer2
  datasource:
    driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
    url: jdbc:log4jdbc:mariadb://localhost/jpa
    username: root
    password: green502
  jackson:
    default-property-inclusion: non_null #응답 JSON을 만들 때 null인 속성은 제외한다.

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: a
            client-secret: a
            scope:
              - email
              - profile #소셜로그인 했을때 받고싶은 데이터
          kakao:
            client-name: Kakao
            client-id: a
            client-secret: a
            client-authentication-method: client_secret_post #client-id, client-secret 쿼리스트링으로 날라가야 한다
            authorization-grant-type: authorization_code #권한부여 유형(인가코드 > access-token 받는 방식 선택)
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
                          # baseUrl: 서버가 돌아가고 있는 host
                          # action: login
                          # registration: kakao
                          # 결과 : localhost:8080/login/oauth2/code/kakao
            scope:
            - profile_nickname
            - profile_image

          naver:
            client-name: Naver
            client-id: a
            client-secret: a
            client-authentication-method: client_secret_post #client-id, client-secret 쿼리스트링으로 날라가야 한다
            authorization-grant-type: authorization_code #권한부여 유형(인가코드 > access-token 받는 방식 선택)
            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
                          # baseUrl: 서버가 돌아가고 있는 host
                          # action: login
                          # registration: kakao
                          # 결과 : localhost:8080/login/oauth2/code/kakao
            scope:
            - name
            - email
            - profile_image

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize #카카오 인증처리 url
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kako.com/v2/user/me
            user-info-authentication-method: header #default값이 header AccessToken 어디에 담아서 보낼지 설정(header, form, query)
            user-name-attribute: id #유일값 속성명
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize #카카오 인증처리 url
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response.id #유일값 속성명

  sql:
    init:
      mode: always
  jpa:
    database: mysql
    hibernate:
      #ddl-auto: update #entity가 없으면 생성, 기존 존재하는 엔티티는 새롭게 추가하는 것만 반영
      ddl-auto: create #entity를 서버 기동때마다 drop 후 create 한다
    properties:
      hibernate:
        jdbc:
          batch_size: 50
        format_sql: true #로그 찍을때마다 보기편하게 포맷팅
        order_updates: true #JPA Batch 작업
    show-sql: true #JPA가 만든 쿼리문 로그에 출력

  servlet:
    multipart:
      max-file-size: 15MB

springdoc:
  swagger-ui:
    default-model-expand-depth: 10
    display-request-duration: true
    groups-order: asc
    operations-sorter: method
    path: /swagger
    tags-sorter: alpha
  cache:
    disabled: true


